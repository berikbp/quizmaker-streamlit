import streamlit as st
import sqlite3
import pandas as pd
import os

DB_PATH = "data/questions.db"

# Initialize database and tables
def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # Questions table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            type TEXT,
            choices TEXT,
            correct TEXT,
            points INTEGER,
            tags TEXT
        )
    """)

    # Scores table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS scores (
            user TEXT,
            score INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Tests table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS tests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            description TEXT,
            tags TEXT
        )
    """)

    # Link table between tests and questions
    cur.execute("""
        CREATE TABLE IF NOT EXISTS test_questions (
            test_id INTEGER,
            question_id INTEGER,
            position INTEGER,
            PRIMARY KEY (test_id, question_id),
            FOREIGN KEY(test_id) REFERENCES tests(id),
            FOREIGN KEY(question_id) REFERENCES questions(id)
        )
    """)

    conn.commit()
    conn.close()

# Page: Add a single question
def add_question_page():
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    qtype = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"])
    points = st.number_input("–ë–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å", min_value=1, value=1)
    tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è choice-–≤–æ–ø—Ä–æ—Å–æ–≤
    if qtype in ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"]:
        raw = st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
        choices = [c.strip() for c in raw.splitlines() if c.strip()]
        if qtype == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
            correct = st.selectbox("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", choices)
        else:
            correct = st.multiselect("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", choices)
    else:
        correct = st.text_input("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"):
        # --- 1) –í–∞–ª–∏–¥–∞—Ü–∏—è ---
        if not text:
            st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.")
            return

        if qtype in ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"]:
            if not choices:
                st.error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
                return
            # correct –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
            correct_list = correct if isinstance(correct, list) else [correct]
            if not correct_list or any(ans is None or ans == "" for ans in correct_list):
                st.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π(—ã–µ) –æ—Ç–≤–µ—Ç(—ã).")
                return

            # —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ë–î
            choices_str = "|".join(choices)
            correct_str = "|".join(str(ans) for ans in correct_list)

        else:
            if not correct:
                st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
                return
            choices_str = ""
            correct_str = correct

        # --- 2) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î ---
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO questions (text, type, choices, correct, points, tags) VALUES (?,?,?,?,?,?)",
            (text, qtype, choices_str, correct_str, points, tags)
        )
        conn.commit()
        conn.close()
        st.success("–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# Page: Create a new test
def create_test_page():
    st.header("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç")
    with st.form("create_test_form"):
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞")
        tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"):
            conn = sqlite3.connect(DB_PATH)
            cur = conn.cursor()
            cur.execute(
                "INSERT INTO tests (name, description, tags) VALUES (?,?,?)",
                (name, description, tags)
            )
            test_id = cur.lastrowid
            conn.commit()
            conn.close()
            st.success(f"–¢–µ—Å—Ç '{name}' —Å–æ–∑–¥–∞–Ω! (ID: {test_id})")

# Page: Add questions to an existing test
def add_questions_to_test_page():
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç")
    conn = sqlite3.connect(DB_PATH)
    tests_df = pd.read_sql("SELECT id, name FROM tests", conn)
    questions_df = pd.read_sql("SELECT id, text FROM questions", conn)
    conn.close()

    if tests_df.empty:
        st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç!")
        return
    if questions_df.empty:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!")
        return

    test_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç", tests_df['id'],
        format_func=lambda x: tests_df.loc[tests_df.id==x, 'name'].values[0]
    )
    selected = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã", questions_df['id'],
        format_func=lambda x: questions_df.loc[questions_df.id==x, 'text'].values[0]
    )

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ—Å—Ç"):
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        max_pos = cur.execute(
            "SELECT MAX(position) FROM test_questions WHERE test_id=?", (test_id,)
        ).fetchone()[0] or 0
        for qid in selected:
            max_pos += 1
            cur.execute(
                "INSERT OR IGNORE INTO test_questions (test_id, question_id, position) VALUES (?,?,?)",
                (test_id, qid, max_pos)
            )
        conn.commit()
        conn.close()
        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(selected)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç ID {test_id}!")

# Helper: Show one question during a full test
def show_question(q_id):
    state = st.session_state
    conn = sqlite3.connect(DB_PATH)
    text, qtype, raw, correct, points = conn.execute(
        "SELECT text,type,choices,correct,points FROM questions WHERE id=?", (q_id,)
    ).fetchone()
    conn.close()

    st.subheader(text)
    if qtype == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
        ans = st.radio("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", raw.split("|"), key=f"q{q_id}")
    elif qtype == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
        ans = st.multiselect("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", raw.split("|"), key=f"q{q_id}")
    else:
        ans = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç", key=f"q{q_id}")

    if st.button("–î–∞–ª—å—à–µ", key=f"next{q_id}"):
        # –ø—Ä–æ–≤–µ—Ä–∫–∞
        if isinstance(ans, list):
            is_ok = set(ans) == set(correct.split("|"))
        else:
            is_ok = (ans == correct)
        if is_ok:
            state.test_score += points
        state.current_q_index += 1
        st.experimental_rerun()

# Page: List all tests
def list_tests_page():
    st.header("üìö –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT * FROM tests", conn)
    conn.close()
    if df.empty:
        st.info("–¢–µ—Å—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç.")
    else:
        st.dataframe(df)

# Page: Take a full multi-question test
def take_full_test_page():
    st.header("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (–≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)")

    # 1) –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞
    conn = sqlite3.connect(DB_PATH)
    tests_df = pd.read_sql("SELECT id, name FROM tests", conn)
    conn.close()
    if tests_df.empty:
        st.info("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç!")
        return

    test_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç",
        tests_df["id"],
        format_func=lambda x: tests_df.loc[tests_df.id == x, "name"].values[0]
    )

    # 2) –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    conn = sqlite3.connect(DB_PATH)
    questions = pd.read_sql(
        """
        SELECT q.id, q.text, q.type, q.choices, q.correct, q.points
        FROM questions q
        JOIN test_questions tq ON q.id = tq.question_id
        WHERE tq.test_id = ?
        ORDER BY tq.position
        """,
        conn,
        params=(test_id,)
    ).to_dict("records")
    conn.close()
    if not questions:
        st.warning("–í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return

    # 3) –§–æ—Ä–º–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    answers = {}
    with st.form("full_test_form"):
        for q in questions:
            st.subheader(q["text"])
            if q["type"] == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
                opts = q["choices"].split("|")
                answers[q["id"]] = st.radio("", opts, key=f"qa_{q['id']}")
            elif q["type"] == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
                opts = q["choices"].split("|")
                answers[q["id"]] = st.multiselect("", opts, key=f"qa_{q['id']}")
            else:
                answers[q["id"]] = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç", key=f"qa_{q['id']}")
        submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã")

    # 4) –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
    if submitted:
        total_score = 0
        max_score = 0
        for q in questions:
            max_score += q["points"]
            user_ans = answers[q["id"]]
            correct_list = (
                q["correct"].split("|")
                if q["type"] != "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
                else [q["correct"]]
            )
            if isinstance(user_ans, list):
                if set(user_ans) == set(correct_list):
                    total_score += q["points"]
            else:
                if user_ans == correct_list[0]:
                    total_score += q["points"]

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
        st.session_state["last_score"] = total_score
        st.session_state["last_max"] = max_score

    # 5) –§–æ—Ä–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Å—á—ë—Ç–∞
    if "last_score" in st.session_state:
        st.success(f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {st.session_state['last_score']} –∏–∑ {st.session_state['last_max']} –±–∞–ª–ª–æ–≤.")
        with st.form("save_score_form"):
            user = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞", key="full_test_user")
            save_clicked = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        if save_clicked:
            if not user:
                st.error("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
            else:
                conn = sqlite3.connect(DB_PATH)
                conn.execute(
                    "INSERT INTO scores (user, score) VALUES (?, ?)",
                    (user, st.session_state["last_score"])
                )
                conn.commit()
                conn.close()
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                # —É–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å
                del st.session_state["last_score"]
                del st.session_state["last_max"]






# Page: Rating leaderboard
def rating_page():
    st.header("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql(
        "SELECT user, SUM(score) AS total_score FROM scores GROUP BY user ORDER BY total_score DESC", conn
    )
    conn.close()
    if df.empty:
        st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç.")
    else:
        st.table(df)

# Main: navigation menu
def main():
    init_db()
    st.sidebar.title("QuizMaker")
    page = st.sidebar.radio("–ú–µ–Ω—é", [
        "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç",
        "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç",
        "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤",
        "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
        "–†–µ–π—Ç–∏–Ω–≥"
    ])
    if page == "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        add_question_page()
    elif page == "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç":
        create_test_page()
    elif page == "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç":
        add_questions_to_test_page()
    elif page == "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤":
        list_tests_page()
    elif page == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        take_full_test_page()
    elif page == "–†–µ–π—Ç–∏–Ω–≥":
        rating_page()

if __name__ == "__main__":
    main()
