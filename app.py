import streamlit as st
import sqlite3
import pandas as pd
import os

DB_PATH = "data/questions.db"

# Initialize database and tables
def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # Questions table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            type TEXT,
            choices TEXT,
            correct TEXT,
            points INTEGER,
            tags TEXT
        )
    """)

    # Scores table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS scores (
            user TEXT,
            score INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Tests table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS tests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            description TEXT,
            tags TEXT
        )
    """)

    # Link table between tests and questions
    cur.execute("""
        CREATE TABLE IF NOT EXISTS test_questions (
            test_id INTEGER,
            question_id INTEGER,
            position INTEGER,
            PRIMARY KEY (test_id, question_id),
            FOREIGN KEY(test_id) REFERENCES tests(id),
            FOREIGN KEY(question_id) REFERENCES questions(id)
        )
    """)

    conn.commit()
    conn.close()

def add_question_page():
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    qtype = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"])
    points = st.number_input("–ë–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å", min_value=1, value=1)
    tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

    if qtype in ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"]:
        raw = st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
        choices = [c.strip() for c in raw.splitlines() if c.strip()]
        if qtype == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
            correct = st.selectbox("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", choices)
        else:
            correct = st.multiselect("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", choices)
    else:
        correct = st.text_input("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"):
        
        if not text:
            st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.")
            return

        if qtype in ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"]:
            if not choices:
                st.error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç.")
                return
            
            corr_list = correct if isinstance(correct, list) else [correct]
            if not corr_list or any(not c for c in corr_list):
                st.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π(—ã–µ) –æ—Ç–≤–µ—Ç(—ã).")
                return

            choices_str = "|".join(choices)
            correct_str = "|".join(corr_list)
        else:
            if not correct:
                st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
                return
            choices_str = ""
            correct_str = correct


        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO questions (text,type,choices,correct,points,tags) VALUES (?,?,?,?,?,?)",
            (text, qtype, choices_str, correct_str, points, tags)
        )
        conn.commit()
        conn.close()
        st.success("–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# ---------------------------------
# Page: Create a new test (wizard)
# ---------------------------------
def create_test_wizard_page():
    """–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ –¥–≤–∞ —à–∞–≥–∞"""
    st.header("üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞")
    st.markdown("–ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ç–µ–≥–æ–≤ ‚Äî –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ **–î–∞–ª–µ–µ**.")


    if "wizard" not in st.session_state:
        st.session_state.wizard = {
            "step":      1,
            "name":      "",
            "desc":      "",
            "tags":      "",
            "questions": []
        }
    w = st.session_state.wizard

    if w["step"] == 1:
        with st.form("wizard_step1"):
            name_in  = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", value=w["name"])
            desc_in  = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", value=w["desc"])
            tags_in  = st.text_input("–¢–µ–≥–∏ —Ç–µ—Å—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=w["tags"])
            go       = st.form_submit_button("–î–∞–ª–µ–µ ‚Üí")

        if go:
            if not name_in.strip():
                st.error("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            else:
                
                w["name"] = name_in.strip()
                w["desc"] = desc_in
                w["tags"] = tags_in
                w["step"] = 2
        return  


    st.subheader("–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã")
    st.markdown("""
  1. –°–ø–µ—Ä–≤–∞ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å—ã
  2. –î–∞–ª—å—à–µ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≤ —Å–æ–∑–¥–∞–Ω–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç
""")

    col1, col2 = st.columns(2)

    # Left: existing questions multiselect
    with col1:
        qs = pd.read_sql("SELECT id,text FROM questions", sqlite3.connect(DB_PATH))
        picked = st.multiselect(
            "–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã",
            options=qs["id"],
            format_func=lambda i: qs.set_index("id").at[i, "text"],
            key="wizard_picked"
        )
        w["questions"] = picked

    # Right: form to add a new question inline
    with col2:
        with st.form("wizard_new_question"):
            qtext   = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", key="new_qtext")
            qtype   = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç","–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä","–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"], key="new_qtype")
            qpoints = st.number_input("–ë–∞–ª–ª—ã", min_value=1, value=1, key="new_qpoints")
            qtags   = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", key="new_qtags")

            if qtype in ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç","–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"]:
                raw = st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã (–ø–æ —Å—Ç—Ä–æ–∫–∞–º)", key="new_qchoices")
                choices = [c.strip() for c in raw.splitlines() if c.strip()]
                if qtype == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
                    correct = st.selectbox("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", choices, key="new_qcorrect_single")
                else:
                    correct = st.multiselect("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", choices, key="new_qcorrect_multi")
            else:
                correct = st.text_input("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", key="new_qcorrect_text")
                choices = []

            add_q   = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
            reset_q = st.form_submit_button("–û—á–∏—Å—Ç–∏—Ç—å")

        if add_q:
            if not qtext:
                st.error("‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            elif qtype != "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç" and not choices:
                st.error("‚ùå –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç")
            elif not correct:
                st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            else:
                ch_str   = "|".join(choices)
                corr_str = "|".join(correct) if isinstance(correct, list) else str(correct)
                conn     = sqlite3.connect(DB_PATH)
                cur      = conn.cursor()
                cur.execute(
                    "INSERT INTO questions (text,type,choices,correct,points,tags) VALUES (?,?,?,?,?,?)",
                    (qtext, qtype, ch_str, corr_str, qpoints, qtags)
                )
                new_id = cur.lastrowid
                conn.commit()
                conn.close()

                st.success(f"‚úÖ –í–æ–ø—Ä–æ—Å ID {new_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                w["questions"].append(new_id)

        if reset_q:
            for k in [
                "new_qtext","new_qtype","new_qpoints","new_qtags",
                "new_qchoices","new_qcorrect_single","new_qcorrect_multi","new_qcorrect_text"
            ]:
                st.session_state.pop(k, None)

    # Finalize test creation
    if st.button("‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"):
        if not w["questions"]:
            st.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
        else:
            conn = sqlite3.connect(DB_PATH)
            cur  = conn.cursor()
            
            cur.execute(
                "INSERT INTO tests (name,description,tags) VALUES (?,?,?)",
                (w["name"], w["desc"], w["tags"])
            )
            test_id = cur.lastrowid
            for idx, qid in enumerate(w["questions"], start=1):
                cur.execute(
                    "INSERT INTO test_questions (test_id,question_id,position) VALUES (?,?,?)",
                    (test_id, qid, idx)
                )
            conn.commit()
            conn.close()

            st.success(f"üéâ –¢–µ—Å—Ç ID {test_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    
            del st.session_state.wizard


    
#List all tests
def list_tests_page():
    st.header("üìö –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT * FROM tests", conn)
    conn.close()

    if df.empty:
        st.info("–¢–µ—Å—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç.")
        return

    all_tags = set()
    for tag_str in df['tags'].fillna("").tolist():
        for t in tag_str.split(","):
            t = t.strip()
            if t:
                all_tags.add(t)
    all_tags = sorted(all_tags)

    #Filter 
    selected_tags = st.multiselect("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–≥–∞–º", all_tags)
    if selected_tags:
        df = df[df['tags'].fillna("").apply(
            lambda tag_str: any(t in tag_str.split(",") for t in selected_tags)
        )]


    name_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    if name_query:
        df = df[df['name'].str.contains(name_query, case=False, na=False)]

    # Pagination
    PAGE_SIZE = 5
    total_pages = (len(df) - 1) // PAGE_SIZE + 1
    page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", 1, total_pages, 1, 1)
    start, end = (page - 1) * PAGE_SIZE, page * PAGE_SIZE

    st.write(f"–ü–æ–∫–∞–∑–∞–Ω—ã {start+1}‚Äì{min(end, len(df))} –∏–∑ {len(df)} —Ç–µ—Å—Ç–æ–≤")
    st.dataframe(df.iloc[start:end])



def take_full_test_page():
    st.header("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (–≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)")

    # Load all available tests
    conn = sqlite3.connect(DB_PATH)
    tests_df = pd.read_sql("SELECT id, name FROM tests", conn)
    conn.close()
    if tests_df.empty:
        st.info("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç!")
        return


    options = [f"{r.id}: {r.name}" for r in tests_df.itertuples()]
    choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç", options)
    test_id = int(choice.split(":", 1)[0])


    conn = sqlite3.connect(DB_PATH)
    questions = pd.read_sql(
        """
        SELECT q.id, q.text, q.type, q.choices, q.correct, q.points
          FROM questions q
          JOIN test_questions tq ON q.id = tq.question_id
         WHERE tq.test_id = ?
         ORDER BY tq.position
        """,
        conn,
        params=(test_id,)
    ).to_dict("records")
    conn.close()
    if not questions:
        st.warning("–í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return


    if "fulltest_submitted" not in st.session_state:
        st.session_state.fulltest_submitted = False
        st.session_state.fulltest_score = 0
        st.session_state.fulltest_max = 0


    with st.form("full_test_form"):
        answers = {}
        for q in questions:
            st.subheader(q["text"])
            opts = q["choices"].split("|") if q["type"] != "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç" else []
            if q["type"] == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
                answers[q["id"]] = st.radio("", opts, key=f"qa_{q['id']}")
            elif q["type"] == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
                answers[q["id"]] = st.multiselect("", opts, key=f"qa_{q['id']}")
            else:
                answers[q["id"]] = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç", key=f"qa_{q['id']}")
        submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã")


    # On submit, calculate total and max score
    if submitted:
        total_score = 0
        max_score = 0
        for q in questions:
            max_score += q["points"]
            user_ans = answers[q["id"]]
            correct_list = (
                q["correct"].split("|")
                if q["type"] != "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
                else [q["correct"]]
            )
            if isinstance(user_ans, list):
                if set(user_ans) == set(correct_list):
                    total_score += q["points"]
            else:
                if user_ans == correct_list[0]:
                    total_score += q["points"]

        st.session_state.fulltest_submitted = True
        st.session_state.fulltest_score = total_score
        st.session_state.fulltest_max = max_score


    if st.session_state.fulltest_submitted:
        st.success(
            f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {st.session_state.fulltest_score} –∏–∑ "
            f"{st.session_state.fulltest_max} –±–∞–ª–ª–æ–≤."
        )

        user = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞",
                             key="fulltest_user")
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", key="save_fulltest_button"):
            if not user.strip():
                st.error("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            else:
                conn = sqlite3.connect(DB_PATH)
                conn.execute(
                    "INSERT INTO scores (user, score) VALUES (?, ?)",
                    (user.strip(), st.session_state.fulltest_score)
                )
                conn.commit()
                conn.close()
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                
                st.session_state.fulltest_submitted = False 



#  Rating leaderboard
def rating_page():
    st.header("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql(
        "SELECT user, SUM(score) AS total_score FROM scores GROUP BY user ORDER BY total_score DESC", conn
    )
    conn.close()
    if df.empty:
        st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç.")
    else:
        st.table(df)


# Editing 
def edit_test_page():
    st.header("‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
    conn = sqlite3.connect(DB_PATH)
    tests = pd.read_sql("SELECT id, name FROM tests", conn)
    conn.close()

    if tests.empty:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.")
        return

    test_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        options=tests["id"],
        format_func=lambda i: f"{i}: {tests.loc[tests.id==i,'name'].iloc[0]}"
    )


    with st.expander("üñâ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ/—Ç–µ–≥–∏"):
        row = tests.set_index("id").loc[test_id]
        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", value=row.name)
        new_desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=row.get("description",""))
        new_tags = st.text_input("–¢–µ–≥–∏", value=row.get("tags",""))
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", key="save_meta"):
            conn = sqlite3.connect(DB_PATH)
            conn.execute(
                "UPDATE tests SET name=?, description=?, tags=? WHERE id=?",
                (new_name, new_desc, new_tags, test_id)
            )
            conn.commit()
            conn.close()
            st.success("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    
    current_qs = pd.read_sql(
        "SELECT q.id, q.text FROM questions q "
        " JOIN test_questions tq ON q.id=tq.question_id "
        " WHERE tq.test_id=? ORDER BY tq.position",
        sqlite3.connect(DB_PATH), params=(test_id,)
    )
    with st.expander("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞"):
        to_remove = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã",
            options=current_qs["id"],
            format_func=lambda i: current_qs.loc[current_qs.id==i,"text"].iat[0]
        )
        if st.button("–£–¥–∞–ª–∏—Ç—å –∏–∑ —Ç–µ—Å—Ç–∞", key="del_from_test"):
            conn = sqlite3.connect(DB_PATH)
            conn.executemany(
                "DELETE FROM test_questions WHERE test_id=? AND question_id=?",
                [(test_id, q) for q in to_remove]
            )
            conn.commit()
            conn.close()
            st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(to_remove)} –≤–æ–ø—Ä–æ—Å(–æ–≤) –∏–∑ —Ç–µ—Å—Ç–∞.")
            


    all_qs = pd.read_sql("SELECT id, text FROM questions", sqlite3.connect(DB_PATH))
    avail = all_qs[~all_qs.id.isin(current_qs.id)]
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ—Å—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"):
        to_add = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã",
            options=avail["id"],
            format_func=lambda i: avail.loc[avail.id==i,"text"].iat[0]
        )
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ—Å—Ç", key="add_to_test"):
            conn = sqlite3.connect(DB_PATH)
            cur = conn.cursor()
            last_pos = cur.execute(
                "SELECT COALESCE(MAX(position),0) FROM test_questions WHERE test_id=?",
                (test_id,)
            ).fetchone()[0]
            for q in to_add:
                last_pos += 1
                cur.execute(
                    "INSERT INTO test_questions(test_id,question_id,position) VALUES(?,?,?)",
                    (test_id, q, last_pos)
                )
            conn.commit()
            conn.close()
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(to_add)} –≤–æ–ø—Ä–æ—Å(–æ–≤).")
            


    with st.expander("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î"):
        df_q = pd.read_sql("SELECT id, text FROM questions", sqlite3.connect(DB_PATH))
        to_del_q = st.multiselect(
            "–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            options=df_q["id"],
            format_func=lambda i: f"{i}: {df_q.loc[df_q.id==i,'text'].iloc[0]}"
        )
        if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", key="del_any_q"):
            conn = sqlite3.connect(DB_PATH)
            cur = conn.cursor()
            
            cur.executemany(
                "DELETE FROM test_questions WHERE question_id=?",
                [(q,) for q in to_del_q]
            )
            
            cur.executemany(
                "DELETE FROM questions WHERE id=?",
                [(q,) for q in to_del_q]
            )
            conn.commit()
            conn.close()
            st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(to_del_q)} –≤–æ–ø—Ä–æ—Å(–æ–≤) –∏–∑ –ë–î.")
            
            
    with st.expander("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–∑ –ë–î"):
        df_t = pd.read_sql("SELECT id, name FROM tests", sqlite3.connect(DB_PATH))
        to_del_t = st.multiselect(
            "–¢–µ—Å—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            options=df_t["id"],
            format_func=lambda i: f"{i}: {df_t.loc[df_t.id==i,'name'].iloc[0]}"
        )
        if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", key="del_any_t"):
            conn = sqlite3.connect(DB_PATH)
            cur = conn.cursor()
            for t in to_del_t:
                cur.execute("DELETE FROM test_questions WHERE test_id=?", (t,))
                cur.execute("DELETE FROM tests WHERE id=?", (t,))
            conn.commit()
            conn.close()
            st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(to_del_t)} —Ç–µ—Å—Ç(–æ–≤).")
            
  
def main():
    init_db()
    st.sidebar.title("QuizMaker")
    page = st.sidebar.radio("–ú–µ–Ω—é", [
        "–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞",
        "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",  
        "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤",
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç",
        "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
        "–†–µ–π—Ç–∏–Ω–≥"
    ])

    if page == "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        add_question_page()
    elif page == "–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞":
        create_test_wizard_page()  
    elif page == "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤":
        list_tests_page()
    elif page == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç":
        edit_test_page() 
    elif page == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        take_full_test_page()
    elif page == "–†–µ–π—Ç–∏–Ω–≥":
        rating_page()

if __name__ == "__main__":
    main()
