import streamlit as st
import sqlite3
import pandas as pd

DB_PATH = "data/questions.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            type TEXT,
            choices TEXT,
            correct TEXT,
            points INTEGER,
            tags TEXT
        )
    """)
    conn.commit()
    conn.close()

def add_question_page():
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    qtype = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"])
    points = st.number_input("–ë–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å", min_value=1, value=1)
    tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

    if qtype in ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"]:
        raw = st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
        choices = [c.strip() for c in raw.splitlines() if c.strip()]
        if qtype == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
            correct = st.selectbox("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", choices)
        else:
            correct = st.multiselect("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", choices)
    else:
        correct = st.text_input("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO questions (text,type,choices,correct,points,tags) VALUES (?,?,?,?,?,?)",
            (text, qtype, "|".join(choices) if qtype!="–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç" else "",
             str(correct), points, tags)
        )
        conn.commit()
        conn.close()
        st.success("–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

def list_tests_page():
    st.header("üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT * FROM questions", conn)
    conn.close()
    st.dataframe(df[["id","text","type","points","tags"]])

def take_test_page():
    st.header("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT id, text FROM questions", conn)
    conn.close()
    qid = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ ID", df["id"])
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å"):
        conn = sqlite3.connect(DB_PATH)
        row = conn.execute("SELECT text,type,choices,correct,points FROM questions WHERE id=?", (qid,)).fetchone()
        conn.close()
        if row:
            text, qtype, raw, correct, points = row
            st.subheader(text)
            if qtype == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
                ans = st.radio("", raw.split("|"))
            elif qtype == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
                ans = st.multiselect("", raw.split("|"))
            else:
                ans = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç")
            if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
                ok = (ans == correct) or (set(ans) == set(eval(correct)))
                st.write("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if ok else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            st.error("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def main():
    init_db()
    st.sidebar.title("QuizMaker")
    page = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"])
    if page == "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        add_question_page()
    elif page == "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤":
        list_tests_page()
    else:
        take_test_page()

if __name__ == "__main__":
    main()
