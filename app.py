import streamlit as st
import sqlite3
import pandas as pd
import os

DB_PATH = "data/questions.db"

# Initialize database and tables
def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            type TEXT,
            choices TEXT,
            correct TEXT,
            points INTEGER,
            tags TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS scores(
            user TEXT,
            score INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def add_question_page():
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    text = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    qtype = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", "–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"])
    points = st.number_input("–ë–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å", min_value=1, value=1)
    tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

    if qtype in ["–û–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"]:
        raw = st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
        choices = [c.strip() for c in raw.splitlines() if c.strip()]
        if qtype == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
            correct = st.selectbox("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", choices)
        else:
            correct = st.multiselect("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", choices)
    else:
        correct = st.text_input("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):  
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO questions (text,type,choices,correct,points,tags) VALUES (?,?,?,?,?,?)",
            (text, qtype, "|".join(choices) if qtype!="–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç" else "", str(correct), points, tags)
        )
        conn.commit()
        conn.close()
        st.success("–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

def list_tests_page():
    st.header("üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT * FROM questions", conn)
    conn.close()

    all_tags = sorted({tag for tags in df["tags"] for tag in tags.split(",") if tag})
    selected_tags = st.multiselect("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–≥–∞–º", all_tags)
    text_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É")

    if selected_tags:
        df = df[df["tags"].apply(lambda s: any(t in s.split(",") for t in selected_tags))]
    if text_query:
        df = df[df["text"].str.contains(text_query, case=False, na=False)]

    PAGE_SIZE = 5
    total_pages = max((len(df) - 1) // PAGE_SIZE + 1, 1)
    page_num = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, max_value=total_pages, value=1, step=1)
    start = (page_num - 1) * PAGE_SIZE
    end = start + PAGE_SIZE
    st.write(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∑–∞–ø–∏—Å–∏ —Å {start+1} –ø–æ {min(end, len(df))} –∏–∑ {len(df)}")
    st.dataframe(df.iloc[start:end][["id","text","type","points","tags"]])

def rating_page():
    st.header("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = sqlite3.connect(DB_PATH)
    df_scores = pd.read_sql(
        "SELECT user, SUM(score) AS total_score FROM scores GROUP BY user ORDER BY total_score DESC",
        conn
    )
    conn.close()

    if df_scores.empty:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    else:
        st.table(df_scores)

def take_test_page():
    st.header("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    if "current_question" not in st.session_state:
        st.session_state.current_question = None
        st.session_state.current_type = None
        st.session_state.current_raw = None
        st.session_state.current_correct = None
        st.session_state.current_points = 0
        st.session_state.pending_score = None  # Track pending score

    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT id, text FROM questions", conn)
    conn.close()
    qid = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ ID", df["id"])

    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å"):
        conn = sqlite3.connect(DB_PATH)
        row = conn.execute(
            "SELECT text,type,choices,correct,points FROM questions WHERE id=?", (qid,)
        ).fetchone()
        conn.close()
        if row:
            text, qtype, raw, correct, points = row
            st.session_state.current_question = text
            st.session_state.current_type = qtype
            st.session_state.current_raw = raw
            st.session_state.current_correct = correct
            st.session_state.current_points = points

    if st.session_state.current_question:
        st.subheader(st.session_state.current_question)
        with st.form("answer_form"):
            if st.session_state.current_type == "–û–¥–∏–Ω –æ—Ç–≤–µ—Ç":
                ans = st.radio("", st.session_state.current_raw.split("|"))
            elif st.session_state.current_type == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
                ans = st.multiselect("", st.session_state.current_raw.split("|"))
            else:
                ans = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç")
            submitted = st.form_submit_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")

        if submitted:
            correct = st.session_state.current_correct
            correct_list = []
            if isinstance(ans, list):
                try:
                    correct_list = eval(correct)
                except Exception:
                    correct_list = []
            is_ok = set(ans) == set(correct_list) if isinstance(ans, list) else (ans == correct)

            if is_ok:
                st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                score = st.session_state.current_points
            else:
                st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                score = 0
            st.session_state.pending_score = score  # Store score to session state

    # Display save form if there's a pending score
    if st.session_state.get("pending_score") is not None:
        with st.form("save_score_form"):
            user = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞", key="save_username")
            save_clicked = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        if save_clicked and user:
            conn = sqlite3.connect(DB_PATH)
            conn.execute("INSERT INTO scores (user, score) VALUES (?, ?)",
                         (user, st.session_state.pending_score))
            conn.commit()
            conn.close()
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            del st.session_state.pending_score  # Clear pending score

def main():
    init_db()
    st.sidebar.title("QuizMaker")
    page = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", [
        "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤",
        "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
        "–†–µ–π—Ç–∏–Ω–≥"
    ])
    if page == "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        add_question_page()
    elif page == "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤":
        list_tests_page()
    elif page == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        take_test_page()
    else:
        rating_page()

if __name__ == "__main__":
    main()